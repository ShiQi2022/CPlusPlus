//
// Created by QsPlus on 2022/9/4.
//

#include <iostream>

using namespace std;

// 形参变量也会存在栈区。
int *TestFunction1(int b)
{
    b = 100;
    // 栈区的局部变量，数据在函数执行之后自动释放。
    int a = 10;
    // 返回局部变量的地址。
    return &a;
}

// 利用 new 关键字可以将数据开辟到堆区。
int *TestFunction2()
{
    // 指针本质是局部变量，放在栈上，但指针保存的数据放在了堆区。
    // 这个数据创建好了之后不是把本身返回给指针，而是把地址返回给指针。
    int *p = new int(99);
    return p;
}

int main()
{
    // C++程序在执行时，将内存大方向划分为四个区域。
    // 1.代码区：存放函数体的二进制代码，由操作系统进行管理。
    // 2.全局区：存放全局变量和静态变量以及常量。
    // 3.栈区：由编译器自动分配释放，存放函数的参数值，局部变量等。
    // 4.堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。

    // 内存四区的意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。

    // 程序运行前：代码区，全局区。

    // 代码区：
    // 1.存放 CPU 执行的机器指令。
    // 2.代码区是共享的，共享的目的是对于频繁执行的程序，只需要在内存中有一份代码即可。
    // 3.代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令。

    // 全局区：
    // 1.全局变量和静态变量（静态储存空间）存在此。
    // 2.全局区还包含了常量区，字符串常量和其他常量也存放在此。
    // 3.全局区域的数据在程序结束后由操作系统管理和释放。

    // 总结：
    // 1.C++中在程序运行前分为全局区和代码区。
    // 2.代码区特点是共享和只读。
    // 3.全局区中存放全局变量，静态变量，常量。
    // 4.常量区中存放const修饰的全局常量和字符串常量。

    // 程序运行后：栈区，堆区。

    // 栈区：
    // 1.由编译器自动分配释放，存放函数的参数值，局部变量等。
    // 注意事项：不要返回局部变量的地址（因为局部变量在执行完之后就清空无效），栈区开辟的数据由编译器自动释放。
    int *p1 = TestFunction1(1);
    // 第一次可以打印正确的数字，因为编译器做了保留（如果第一次输出乱数，则没做保留）。
    cout << "局部变量的地址为：" << *p1 << endl;
    // 第二次这个数据就不再保留了。
    cout << "局部变量的地址为：" << *p1 << endl;

    // 堆区：
    // 1.
    int *p2 = TestFunction2();
    cout << "堆区变量为：" << *p2 << endl;
    cout << "堆区变量为：" << *p2 << endl;
    cout << "堆区变量为：" << *p2 << endl;

    // 总结：
    // 1.堆区数据由程序员管理开辟和释放。
    // 2.堆区数据利用 new 关键字进行开辟内存。


    return 0;
}